var R=Object.defineProperty;var S=(l,t,e)=>t in l?R(l,t,{enumerable:!0,configurable:!0,writable:!0,value:e}):l[t]=e;var m=(l,t,e)=>(S(l,typeof t!="symbol"?t+"":t,e),e);import{g as y,S as p}from"./index-04a97e2f.js";import{H as F}from"./HTTPFileSystem-1abeeaf0.js";import{f as D}from"./util-f1a89f99.js";import{W as O}from"./RoadNetworkLoader.worker-758f3878.js";import{I as L}from"./index-f6506551.js";function g(l){return l}function I(l,...t){return k(l,g,g,t)}function P(l,t,...e){return k(l,g,t,e)}function k(l,t,e,s){return function i(a,o){if(o>=s.length)return e(a);const d=new L,n=s[o++];let u=-1;for(const r of a){const f=n(r,++u,a),c=d.get(f);c?c.push(r):d.set(f,[r])}for(const[r,f]of d)d.set(r,i(f,o));return t(d)}(l,0)}function b(){return new Worker("/sandbox/assets/DataFetcher.worker-619eb8d2.js")}const E=!!window.showDirectoryPicker,x=!E;class N{constructor(...t){m(this,"files",[]);m(this,"threads",[]);m(this,"subfolder","");m(this,"root","");m(this,"fileApi");m(this,"networks",{});m(this,"datasets",{});this.root=t.length?t[0]:"",this.subfolder=t.length?t[1]:"",this.fileApi=this._getFileSystem(this.root)}kill(){for(const t of this.threads)t.terminate()}getFilteredDataset(t){return t.dataset in this.datasets?{filteredRows:this.datasets[t.dataset].filteredRows}:{filteredRows:null}}async OLDgetFiltered(t){const e=this.datasets[t.dataset].filteredRows;if(!e)return{filteredRows:null};let s={};if(t.value&&t.groupBy){const o=t.value,d=t.groupBy;s=P(e,n=>n.reduce((u,r)=>u+r[o],0),n=>n[d])}const i=Array.from(s.keys()),a=Array.from(s.values());return{filteredRows:{x:i,y:a}}}async getDataset(t,e){try{this.datasets[t.dataset]||(console.log("load:",t.dataset),this.datasets[t.dataset]={dataset:this._fetchDataset(t,e),activeFilters:{},filteredRows:null,filterListeners:new Set});let s=await this.datasets[t.dataset].dataset,i={...s};return t.ignoreColumns&&t.ignoreColumns.forEach(a=>{delete i[a]}),t.useLastRow&&Object.keys(i).forEach(a=>{const o=s[a].values;i[a]=o[o.length-1]}),{allRows:i}}catch{return{allRows:{}}}}setFeatureProperties(t,e,s){const i=t.substring(t.lastIndexOf("/")+1);let a={dataset:i};return typeof s!="string"&&(a=Object.assign(a,s)),this.datasets[i]={activeFilters:{},filteredRows:null,filterListeners:new Set,dataset:new Promise((o,d)=>{const n=new b;this.threads.push(n);try{n.postMessage({config:a,featureProperties:e}),n.onmessage=u=>{n.terminate(),u.data.error&&(console.log(u.data.error),y.commit("setStatus",{type:p.ERROR,msg:`Problem loading properties in ${t}`,desc:"File loaded from storage, but properties table could not be parsed"}),d()),o(u.data)}}catch(u){n.terminate(),console.error(u),d(u)}})},this.datasets[i].dataset}setPreloadedDataset(t){this.datasets[t.key]={dataset:new Promise((e,s)=>{e(t.dataTable)}),activeFilters:{},filteredRows:null,filterListeners:new Set}}async getRoadNetwork(t,e,s,i){const a=`/${e}/${t}`;return this.networks[a]||(this.networks[a]=this._fetchNetwork({subfolder:e,filename:t,vizDetails:s,cbStatus:i})),await this.networks[a]}setFilter(t){const{dataset:e,column:s,value:i,invert:a,range:o}=t;if(!this.datasets[e]){console.warn(`${e} doesn't exist yet`),console.warn(Object.keys(this.datasets));return}console.log("> setFilter",e,s,i);const d=Array.isArray(i)?i:[i];this.datasets[e].activeFilters==null&&(this.datasets[e].activeFilters={});const n=this.datasets[e].activeFilters;d.length?n[s]={values:d,invert:a,range:o}:delete n[s],this._updateFilters(e)}addFilterListener(t,e){if(!this.datasets[t.dataset])throw Error("No dataset named: "+t.dataset);this.datasets[t.dataset].filterListeners.add(e)}removeFilterListener(t,e){try{this.datasets[t.dataset].filterListeners&&this.datasets[t.dataset].filterListeners.delete(e)}catch{}}clearCache(){this.kill(),this.datasets={},this.networks={}}async _updateFilters(t){console.log("> updateFilters ",t);const e=this.datasets[t];if(console.log({metaData:e}),!Object.keys(e.activeFilters).length){console.log("no keys"),e.filteredRows=null,this._notifyListeners(t);return}const s=await e.dataset,i=Object.keys(s);let a=[];const o=s[i[0]].values.length;console.log("FILTERS:",e.activeFilters),console.log("TOTLROWS",o);const d=new Array(o).fill(!0),n=/^(<|>)/;for(const[u,r]of Object.entries(e.activeFilters)){const f=s[u];if((r.values[0]===void 0||r.values[0]==="")&&y.commit("error",t+": filter error"),n.test(r.values[0]))r.values[0].startsWith("<=")?(r.conditional="<=",r.values[0]=r.values[0].substring(2).trim()):r.values[0].startsWith(">=")?(r.conditional=">=",r.values[0]=r.values[0].substring(2).trim()):r.values[0].startsWith("<")?(r.conditional="<",r.values[0]=r.values[0].substring(1).trim()):r.values[0].startsWith(">")&&(r.conditional=">",r.values[0]=r.values[0].substring(1).trim());else if(r.values.length===1&&typeof r.values[0]=="string"){const c=parseFloat(r.values[0]);Number.isFinite(c)&&r.values.push(c)}for(let c=0;c<o;c++)W(r,f.values[c])||(d[c]=!1)}for(let u=0;u<o;u++)if(d[u]){const r={};i.forEach(f=>r[f]=s[f].values[u]),a.push(r)}e.filteredRows=a,this._notifyListeners(t)}_notifyListeners(t){const e=this.datasets[t];for(const s of e.filterListeners)s(t)}async _fetchDataset(t,e){if(!this.files.length){const{files:s}=await new F(this.fileApi).getDirectory(this.subfolder);this.files=s}return new Promise((s,i)=>{const a=new b;this.threads.push(a);try{a.postMessage({fileSystemConfig:this.fileApi,subfolder:this.subfolder,files:this.files,config:t,options:e}),a.onmessage=o=>{if(a.terminate(),o.data.error){let d=""+o.data.error;d=d.replace("[object Response]","Error loading file"),t!=null&&t.dataset&&d.indexOf(t.dataset)===-1&&(d+=`: ${t.dataset}`),y.commit("setStatus",{type:p.ERROR,msg:d,desc:JSON.stringify(t)}),i()}s(o.data)}}catch(o){a.terminate(),console.error(o),i(o)}})}async _fetchNetwork(t){return new Promise(async(e,s)=>{const{subfolder:i,filename:a,vizDetails:o,cbStatus:d}=t,n=`/${i}/${a}`;console.log("load network:",n);let u=n.indexOf("/")>-1?n.substring(0,n.lastIndexOf("/")):this.subfolder;const{files:r}=await new F(this.fileApi).getDirectory(u);let f=n.indexOf("/")===-1?n:n.substring(n.lastIndexOf("/")+1);D(r,f).length!==1&&s("File not found: "+n);const w=new O;try{w.onmessage=h=>{if(h.data.promptUserForCRS){let v=prompt("Enter the coordinate reference system, e.g. EPSG:25832")||"EPSG:31468";Number.isInteger(parseInt(v))&&(v=`EPSG:${v}`),w.postMessage({crs:v});return}if(h.data.status){d&&d(h.data.status);return}w.terminate(),h.data.error&&(console.error(h.data.error),s(h.data.error)),e(h.data.links)},w.postMessage({filePath:n,fileSystem:this.fileApi,vizDetails:o,isFirefox:x})}catch(h){w.terminate(),console.error(h),s(h)}})}_getFileSystem(t){const e=y.state.svnProjects.filter(s=>s.slug===t);if(e.length===0)throw console.error("DDM: no such project"),Error;return e[0]}}function W(l,t){const e={"<":()=>t<l.values[0],"<=":()=>t<=l.values[0],">":()=>t>l.values[0],">=":()=>t>=l.values[0]};let s;return l.range?s=t>=l.values[0]&&t<=l.values[1]:l.conditional?s=e[l.conditional]():s=l.values.includes(t),l.invert?!s:s}export{N as D,b as W,W as c,I as g,P as r};
//# sourceMappingURL=DashboardDataManager-654ce543.js.map
