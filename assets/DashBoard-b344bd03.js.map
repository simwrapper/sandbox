{"version":3,"mappings":"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","names":["panelLookup","defineAsyncComponent","__vitePreload","buildCleanTitle","plotTitle","subfolder","title","namedCharts","chartTypes","key","_sfc_main","defineComponent","TopSheet","HTTPFileSystem","card","event","row","f","options","cardId","element","dimensions","globalStore","height","style","name","svnProject","a","yaml","YAML","numCard","rowId","cards","Vue","header","tag","dashboard","rowClass"],"sources":["../../src/dash-panels/_allPanels.ts","../../src/layout-manager/DashBoard.vue"],"sourcesContent":["import { AsyncComponent, defineAsyncComponent } from 'vue'\n\n// add every chart type here.\n// the name of the import will be the chart \"type\" in YAML.\n\n// resizable charts:\nexport const panelLookup: { [key: string]: AsyncComponent } = {\n  aggregate: defineAsyncComponent(() => import('./aggregate-od.vue')),\n  area: defineAsyncComponent(() => import('./area.vue')),\n  bar: defineAsyncComponent(() => import('./bar.vue')),\n  bubble: defineAsyncComponent(() => import('./bubble.vue')),\n  csv: defineAsyncComponent(() => import('./table.vue')),\n  heatmap: defineAsyncComponent(() => import('./heatmap.vue')),\n  hexagons: defineAsyncComponent(() => import('./hexagons.vue')),\n  line: defineAsyncComponent(() => import('./line.vue')),\n  pie: defineAsyncComponent(() => import('./pie.vue')),\n  plotly: defineAsyncComponent(() => import('./plotly.vue')),\n  sankey: defineAsyncComponent(() => import('./sankey.vue')),\n  scatter: defineAsyncComponent(() => import('./scatter.vue')),\n  slideshow: defineAsyncComponent(() => import('./slideshow.vue')),\n  text: defineAsyncComponent(() => import('./text.vue')),\n  tile: defineAsyncComponent(() => import('./tile.vue')),\n  transit: defineAsyncComponent(() => import('./transit.vue')),\n  vega: defineAsyncComponent(() => import('./vega.vue')),\n  video: defineAsyncComponent(() => import('./video.vue')),\n  xml: defineAsyncComponent(() => import('./xml.vue')),\n\n  // full-screen map visualizations:\n  carriers: defineAsyncComponent(() => import('./carriers.vue')),\n  flowmap: defineAsyncComponent(() => import('./flowmap.vue')),\n  links: defineAsyncComponent(() => import('./links.vue')),\n  map: defineAsyncComponent(() => import('./area-map.vue')),\n  xytime: defineAsyncComponent(() => import('./xytime.vue')),\n}\n\n// ----- EXPORT CHARTS HERE ---------------------------------------------------\n// export all resizable charts here\nexport const plotlyCharts = {\n  // aggregate,\n  // area,\n  // bar,\n  // bubble,\n  // csv,\n  // heatmap,\n  // hexagons,\n  // image: slideshow, // both 'image' and 'slideshow' types work for images\n  // line,\n  // markdown: text,\n  // pie,\n  // plotly,\n  // sankey,\n  // slideshow,\n  // text,\n  // tile,\n  // transit,\n  // scatter,\n  // vega,\n  // video,\n  // xml,\n  // xytime,\n}\n\n// export all remaining charts/maps here:\n// export default Object.assign({}, /*{ carriers, flowmap, links, map },*/ plotlyCharts)\n// export default { panelLookup }\n\n// ----- HELPER FUNCTIONS -----------------------------------------------------\n\nexport function buildCleanTitle(plotTitle: string, subfolder: string): string {\n  let title = plotTitle\n\n  if (subfolder) {\n    title = subfolder.substring(1 + subfolder.lastIndexOf('/')) + ' - ' + title\n  }\n\n  title = title.replaceAll('/', '-')\n  return title\n}\n","<template lang=\"pug\">\n.dashboard(:class=\"{wiide, 'is-panel-narrow': isPanelNarrow }\" :id=\"viewId\")\n  .dashboard-content(:class=\"{wiide}\" :style=\"dashWidthCalculator\")\n    .dashboard-header(v-if=\"!fullScreenCardId && (title + description)\"\n      :class=\"{wiide, 'is-panel-narrow': isPanelNarrow}\"\n    )\n      h2 {{ title }}\n      p {{ description }}\n\n    //- start row here\n    .dash-row(v-for=\"row,i in rows\" :key=\"i\" :class=\"getRowClass(row)\")\n\n      //- each card here\n      .dash-card-frame(v-for=\"card,j in row.cards\" :key=\"`${i}/${j}`\"\n        :style=\"getCardStyle(card)\"\n        :class=\"{wiide, 'is-panel-narrow': isPanelNarrow}\"\n      )\n\n        //- card header/title\n        .dash-card-headers(v-if=\"card.title + card.description\" :class=\"{'fullscreen': !!fullScreenCardId}\")\n          .header-labels\n            h3 {{ card.title }}\n            p(v-if=\"card.description\") {{ card.description }}\n\n          //- zoom button\n          .header-buttons\n            button.button.is-small.is-white(\n              v-if=\"card.info\"\n              @click=\"handleToggleInfoClick(card)\"\n              :title=\"infoToggle[card.id] ? 'Hide Info':'Show Info'\"\n            )\n              i.fa.fa-info-circle\n\n            button.button.is-small.is-white(\n              @click=\"toggleZoom(card)\"\n              :title=\"fullScreenCardId ? 'Restore':'Enlarge'\"\n            )\n              i.fa.fa-expand\n\n        // info contents\n        .info(v-show=\"infoToggle[card.id]\")\n          p\n          p {{ card.info }}\n\n\n        //- card contents\n        .spinner-box(v-if=\"getCardComponent(card)\" :id=\"card.id\" :class=\"{'is-loaded': card.isLoaded}\")\n\n          component.dash-card(\n            :is=\"getCardComponent(card)\"\n            :fileSystemConfig=\"fileSystemConfig\"\n            :subfolder=\"xsubfolder\"\n            :files=\"fileList\"\n            :yaml=\"card.props.configFile\"\n            :config=\"card.props\"\n            :datamanager=\"datamanager\"\n            :style=\"{opacity: opacity[card.id]}\"\n            :cardId=\"card.id\"\n            :cardTitle=\"card.title\"\n            :allConfigFiles=\"allConfigFiles\"\n            @isLoaded=\"handleCardIsLoaded(card)\"\n            @dimension-resizer=\"setDimensionResizer\"\n            @titles=\"setCardTitles(card, $event)\"\n          )\n\n</template>\n\n<script lang=\"ts\">\nimport Vue, { defineComponent } from 'vue'\nimport type { PropType } from 'vue'\n\nimport YAML from 'yaml'\n\nimport globalStore from '@/store'\nimport { FileSystemConfig, YamlConfigs } from '@/Globals'\nimport HTTPFileSystem from '@/js/HTTPFileSystem'\n\nimport TopSheet from '@/components/TopSheet/TopSheet.vue'\n// import charts, { plotlyCharts } from '@/dash-panels/_allPanels'\n\nimport { panelLookup } from '@/dash-panels/_allPanels'\nimport DashboardDataManager from '@/js/DashboardDataManager'\n\n// append a prefix so the html template is legal\nconst namedCharts = {} as any\nconst chartTypes = Object.keys(panelLookup)\n// const plotlyChartTypes = {} as any\n\nchartTypes.forEach((key: any) => {\n  namedCharts[`card-${key}`] = panelLookup[key] // key // charts[key] as any\n  // //@ts-ignore\n  // if (plotlyCharts[key]) plotlyChartTypes[key] = true\n})\n\nexport default defineComponent({\n  name: 'Dashboard',\n  components: Object.assign({ TopSheet }, namedCharts),\n  props: {\n    root: { type: String, required: true },\n    xsubfolder: { type: String, required: true },\n    allConfigFiles: { type: Object as PropType<YamlConfigs>, required: true },\n    datamanager: { type: Object as PropType<DashboardDataManager>, required: true },\n    gist: Object as any,\n    config: Object as any,\n    zoomed: Boolean,\n  },\n  data: () => {\n    return {\n      title: '',\n      description: '',\n      viewId: 'dashboard-' + Math.floor(1e12 * Math.random()),\n      yaml: {} as any,\n      rows: [] as { id: string; cards: any[] }[],\n      fileList: [] as string[],\n      fileSystemConfig: {} as FileSystemConfig,\n      fullScreenCardId: '',\n      resizers: {} as { [id: string]: any },\n      infoToggle: {} as { [id: string]: boolean },\n      isResizing: false,\n      opacity: {} as any,\n      narrowPanelObserver: null as ResizeObserver | null,\n      isPanelNarrow: false,\n      numberOfShownCards: 1,\n    }\n  },\n  computed: {\n    dashWidthCalculator(): any {\n      if (this.$store.state.dashboardWidth && this.$store.state.isFullWidth) {\n        return { maxWidth: this.$store.state.dashboardWidth }\n      }\n      return {}\n    },\n    wiide(): boolean {\n      return this.$store.state.isFullWidth\n    },\n    fileApi(): HTTPFileSystem {\n      return new HTTPFileSystem(this.fileSystemConfig)\n    },\n  },\n  watch: {\n    async '$store.state.resizeEvents'() {\n      await this.$nextTick()\n      this.resizeAllCards()\n    },\n    '$store.state.locale'() {\n      this.updateThemeAndLabels()\n    },\n  },\n  methods: {\n    /**\n     * This only gets triggered when a topsheet has some titles.\n     * Remove the dashboard titles and use the ones from the topsheet.\n     */\n    setCardTitles(card: any, event: any) {\n      console.log(card, event)\n      card.title = event\n      card.description = ''\n    },\n\n    resizeAllCards() {\n      this.isResizing = true\n      for (const row of this.rows) {\n        for (const card of row.cards) {\n          this.updateDimensions(card.id)\n        }\n      }\n      this.isResizing = false\n    },\n\n    handleToggleInfoClick(card: any) {\n      this.infoToggle[card.id] = !this.infoToggle[card.id]\n    },\n\n    async getFiles() {\n      const folderContents = await this.fileApi.getDirectory(this.xsubfolder)\n\n      // hide dot folders\n      const files = folderContents.files.filter(f => !f.startsWith('.')).sort()\n      return files\n    },\n\n    getCardComponent(card: { type: string }) {\n      // console.log(1, card)\n      if (card.type === 'table' || card.type === 'topsheet') return 'TopSheet'\n\n      // load the plugin\n      if (panelLookup[card.type]) {\n        return panelLookup[card.type]\n      }\n\n      // might be a chart\n      if (chartTypes.indexOf(card.type) > -1) return 'card-' + card.type\n\n      // or might be a vue component?\n      return undefined // card.type\n    },\n\n    setDimensionResizer(options: { id: string; resizer: any }) {\n      this.resizers[options.id] = options.resizer\n      this.updateDimensions(options.id)\n    },\n\n    async toggleZoom(card: any) {\n      if (this.fullScreenCardId) {\n        this.fullScreenCardId = ''\n      } else {\n        this.fullScreenCardId = card.id\n      }\n      this.$emit('zoom', this.fullScreenCardId)\n      // allow vue to resize everything\n      await this.$nextTick()\n      // tell plotly to resize everything\n      this.updateDimensions(card.id)\n    },\n\n    updateDimensions(cardId: string) {\n      const element = document.getElementById(cardId)\n\n      if (element) {\n        const dimensions = { width: element.clientWidth, height: element.clientHeight }\n        if (this.resizers[cardId]) this.resizers[cardId](dimensions)\n      }\n      if (!this.isResizing) globalStore.commit('resize')\n    },\n\n    getCardStyle(card: any) {\n      // figure out height. If card has registered a resizer with changeDimensions(),\n      // then it needs a default height (300)\n      const defaultHeight = 300 // plotlyChartTypes[card.type] ? 300 : undefined\n      const height = card.height ? card.height * 60 : defaultHeight\n\n      const flex = card.width || 1\n\n      let style: any = {\n        // margin: '2rem 1rem 2rem 0',\n        flex: flex,\n      }\n\n      if (height) {\n        style.minHeight = `${height}px`\n      }\n\n      if (this.fullScreenCardId) {\n        if (this.fullScreenCardId !== card.id) {\n          style.display = 'none'\n        } else {\n          style = {\n            position: 'absolute',\n            top: 0,\n            bottom: 0,\n            left: 0,\n            right: 0,\n            margin: '18px 1rem 0.5rem 1rem',\n          }\n        }\n      }\n\n      return style\n    },\n\n    getFileSystem(name: string): FileSystemConfig {\n      const svnProject: FileSystemConfig[] = this.$store.state.svnProjects.filter(\n        (a: FileSystemConfig) => a.slug === name\n      )\n      if (svnProject.length === 0) throw Error('no such project')\n      return svnProject[0]\n    },\n\n    async setupDashboard() {\n      // Do we have config already or do we need to fetch it from the yaml file?\n      if (this.config) {\n        this.yaml = this.config\n      } else if (this.gist) {\n        this.yaml = this.gist\n      } else {\n        const yaml = await this.fileApi.getFileText(`${this.xsubfolder}/dashboard.yaml`)\n        this.yaml = YAML.parse(yaml)\n      }\n\n      // set header\n      this.updateThemeAndLabels()\n\n      // build rows\n      let numCard = 1\n\n      for (const rowId of Object.keys(this.yaml.layout)) {\n        let cards: any[] = this.yaml.layout[rowId]\n\n        // row must be an array - if it isn't, assume it is an array of length one\n        if (!cards.forEach) cards = [cards]\n\n        cards.forEach(card => {\n          card.id = `card-id-${numCard}`\n          card.isLoaded = false\n          card.number = numCard\n\n          // make YAML easier to write: merge \"props\" property with other properties\n          // so user doesn't need to specify \"props: {...}\"\n          if (!card.props) card.props = Object.assign({}, card)\n\n          // Vue 2 is weird about new properties: use Vue.set() instead\n          Vue.set(this.opacity, card.id, 0.5)\n          Vue.set(this.infoToggle, card.id, false)\n\n          // Card header could be hidden\n          if (!card.title && !card.description) card.showHeader = false\n          else card.showHeader = true\n\n          numCard++\n        })\n\n        this.rows.push({ id: rowId, cards })\n      }\n      this.$emit('layoutComplete')\n    },\n\n    updateThemeAndLabels() {\n      this.title = this.getDashboardLabel('title')\n      this.description = this.getDashboardLabel('description')\n\n      if (this.yaml.header.theme) {\n        this.$store.commit('setTheme', this.yaml.header.theme)\n      }\n    },\n    getDashboardLabel(element: 'title' | 'description') {\n      const header = this.yaml.header\n      let tag = '...'\n\n      if (this.$store.state.locale === 'de') {\n        tag = header[`${element}_de`] || header[`${element}`] || header[`${element}_en`] || ''\n      } else {\n        tag = header[`${element}_en`] || header[`${element}`] || header[`${element}_de`] || ''\n      }\n\n      return tag\n    },\n\n    async handleCardIsLoaded(card: any) {\n      card.isLoaded = true\n      this.opacity[card.id] = 1.0\n      this.numberOfShownCards++\n    },\n\n    setupNarrowPanelObserver() {\n      const dashboard = document.getElementById(this.viewId) as HTMLElement\n      this.narrowPanelObserver = new ResizeObserver(this.handleResize)\n      this.narrowPanelObserver.observe(dashboard)\n    },\n\n    handleResize() {\n      const dashboard = document.getElementById(this.viewId) as HTMLElement\n      if (dashboard) this.isPanelNarrow = dashboard.clientWidth < 800\n      this.$store.commit('resize')\n    },\n\n    getRowClass(row: any) {\n      const rowClass = { 'is-panel-narrow': this.isPanelNarrow } as any\n      rowClass[`row-${row.id}`] = true\n      return rowClass\n    },\n  },\n  async mounted() {\n    window.addEventListener('resize', this.resizeAllCards)\n    this.setupNarrowPanelObserver()\n\n    if (this.gist) {\n      this.fileSystemConfig = {\n        name: 'gist',\n        slug: 'gist',\n        description: 'From GitHub',\n        baseURL: this.gist.config.baseUrl,\n      }\n    } else {\n      this.fileSystemConfig = this.getFileSystem(this.root)\n    }\n\n    this.fileList = await this.getFiles()\n\n    await this.setupDashboard()\n    // await this.$nextTick()\n    this.resizeAllCards()\n  },\n  beforeDestroy() {\n    this.resizers = {}\n    window.removeEventListener('resize', this.resizeAllCards)\n  },\n})\n</script>\n\n<style scoped lang=\"scss\">\n@import '@/styles.scss';\n\n.dashboard {\n  margin: 0 0;\n  padding: 1rem 0rem 1rem 1rem;\n\n  .dashboard-content {\n    max-width: $dashboardWidth;\n    margin: 0 auto 0 auto;\n  }\n\n  .dashboard-content.wiide {\n    max-width: unset;\n  }\n}\n\n.dashboard.wiide {\n  padding-left: 2rem;\n}\n\n.dashboard-header {\n  margin: 1rem 3rem 1rem 0rem;\n\n  h2 {\n    line-height: 3rem;\n  }\n}\n\n.dashboard-header.wiide {\n  margin-right: 3rem;\n}\n\n.dash-row {\n  display: flex;\n  flex-direction: row;\n}\n\n.dash-card-frame {\n  display: grid;\n  grid-auto-columns: 1fr;\n  grid-auto-rows: auto auto 1fr;\n  margin: 2rem 2rem 2rem 0;\n\n  .dash-card-headers {\n    display: flex;\n    flex-direction: row;\n    border-top: var(--borderDashboard);\n    padding-top: 0.1rem;\n  }\n\n  .dash-card-headers.fullscreen {\n    padding-top: 0;\n  }\n\n  .header-buttons {\n    display: flex;\n    flex-direction: row;\n    margin-left: auto;\n\n    button {\n      background-color: #00000000;\n      color: var(--link);\n      opacity: 0.5;\n    }\n    button:hover {\n      background-color: #ffffff20;\n      opacity: 1;\n    }\n  }\n\n  h3 {\n    grid-row: 1 / 2;\n    font-size: 1.2rem;\n    line-height: 1.5rem;\n    margin-top: 0.1rem;\n    margin-bottom: 0.5rem;\n    color: var(--link);\n  }\n\n  // if there is a description, fix the margins\n  p {\n    grid-row: 2 / 3;\n    margin-top: -0.5rem;\n    margin-bottom: 0.5rem;\n  }\n\n  .spinner-box {\n    grid-row: 3 / 4;\n    position: relative;\n    background: url('../assets/simwrapper-logo/SW_logo_icon_anim.gif');\n    background-size: 8rem;\n    background-repeat: no-repeat;\n    background-position: center center;\n  }\n\n  .spinner-box.is-loaded {\n    background: none;\n  }\n}\n\n.dash-card-frame.wiide {\n  margin-right: 2rem;\n}\n\n.dash-card {\n  transition: opacity 0.5s;\n  overflow-x: hidden;\n  overflow-y: hidden;\n}\n\n// Observe for narrowness instead of a media-query\n// since the panel might be narrow even if the window is wide.\n.dashboard.is-panel-narrow {\n  padding: 1rem 0rem 1rem 1rem;\n}\n\n.dashboard-header.is-panel-narrow {\n  margin: 1rem 1rem 1rem 0rem;\n}\n\n.dash-row.is-panel-narrow {\n  flex-direction: column;\n}\n\n.dash-card-frame.is-panel-narrow {\n  margin: 2rem 1rem 2rem 0;\n}\n</style>\n"],"file":"assets/DashBoard-b344bd03.js"}